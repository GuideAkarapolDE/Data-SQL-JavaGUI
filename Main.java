/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author akara
 */
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;

public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        load = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        Search = new javax.swing.JTextField();
        clear = new javax.swing.JButton();
        add = new javax.swing.JButton();
        id = new javax.swing.JTextField();
        name = new javax.swing.JTextField();
        major = new javax.swing.JTextField();
        age = new javax.swing.JTextField();
        gpa = new javax.swing.JTextField();
        delete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        connect = new javax.swing.JLabel();
        SearchDa = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 204, 153));
        setForeground(java.awt.Color.lightGray);

        load.setBackground(new java.awt.Color(255, 255, 153));
        load.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        load.setText("Load");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        Table.setBackground(new java.awt.Color(153, 204, 255));
        Table.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Major", "Age", "GPA"
            }
        ));
        jScrollPane1.setViewportView(Table);

        Search.setBackground(new java.awt.Color(255, 204, 204));
        Search.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N

        clear.setBackground(new java.awt.Color(255, 102, 102));
        clear.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        add.setBackground(new java.awt.Color(153, 255, 153));
        add.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        id.setBackground(new java.awt.Color(255, 153, 204));
        id.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N

        name.setBackground(new java.awt.Color(255, 153, 255));
        name.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N

        major.setBackground(new java.awt.Color(255, 153, 204));
        major.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N

        age.setBackground(new java.awt.Color(255, 153, 204));
        age.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N

        gpa.setBackground(new java.awt.Color(255, 153, 204));
        gpa.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N

        delete.setBackground(new java.awt.Color(153, 153, 255));
        delete.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Connect to");

        connect.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        connect.setText("jdbc:mysql://localhost:3306/project");

        SearchDa.setBackground(new java.awt.Color(255, 153, 102));
        SearchDa.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        SearchDa.setText("Search");
        SearchDa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchDaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(connect))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Search)
                            .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(load, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SearchDa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(major, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gpa, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(major, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(gpa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(SearchDa, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(load, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(connect))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>                        

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {                                     

        Connection con = null;
        try {

            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/project", "root", "");

            connect.setText("Connected!");

            loadDataToTable(con);

        } catch (SQLException e) {

            connect.setText("Not Connected!");

            e.printStackTrace();
        } finally {

            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    private void loadDataToTable(Connection con) {
        DefaultTableModel tblModel = (DefaultTableModel) Table.getModel();
        try {
            Statement stmt = con.createStatement();
            String query = "SELECT * FROM students";
            ResultSet rs = stmt.executeQuery(query);

            tblModel.setRowCount(0);

            while (rs.next()) {
                String ID = String.valueOf(rs.getLong("ID"));
                String Name = rs.getString("Name");
                String Major = rs.getString("Major");
                String Age = String.valueOf(rs.getInt("Age"));
                String GPA = rs.getString("GPA");
                tblModel.addRow(new String[]{ID, Name, Major, Age, GPA});
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }                                    

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {                                      
        Search.setText("");
        DefaultTableModel tblModel = (DefaultTableModel) Table.getModel();
        tblModel.setRowCount(0);
    }                                     

    private void addActionPerformed(java.awt.event.ActionEvent evt) {                                    
        try {

            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/project", "root", "");

            String query = "INSERT INTO students (ID, Name, Major, Age, GPA) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement pst = con.prepareStatement(query);

            pst.setLong(1, Long.parseLong(id.getText()));
            pst.setString(2, name.getText());
            pst.setString(3, major.getText());
            pst.setInt(4, Integer.parseInt(age.getText()));
            pst.setDouble(5, Double.parseDouble(gpa.getText()));

            // Execute SQL
            pst.executeUpdate();

            id.setText("");
            name.setText("");
            major.setText("");
            age.setText("");
            gpa.setText("");

            LoadTableData();

            pst.close();
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }                                   

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {                                       

        int selectedRow = Table.getSelectedRow();

        if (selectedRow != -1) {

            String id = Table.getValueAt(selectedRow, 0).toString();

            try {

                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/project", "root", "");

                String sql = "DELETE FROM students WHERE ID = ?";
                PreparedStatement pstmt = con.prepareStatement(sql);
                pstmt.setString(1, id);
                int result = pstmt.executeUpdate();

                if (result > 0) {

                    DefaultTableModel model = (DefaultTableModel) Table.getModel();
                    model.removeRow(selectedRow);
                }

                pstmt.close();
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }                                      

    private void SearchDaActionPerformed(java.awt.event.ActionEvent evt) {                                         
        String searchText = Search.getText().trim();
        if (searchText.isEmpty()) {
            return;
        }

        Connection con = null;
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/project", "root", "");
            connect.setText("Connected!");

            DefaultTableModel tblModel = (DefaultTableModel) Table.getModel();
            tblModel.setRowCount(0); // Clear existing data

            String query = "SELECT * FROM students WHERE Name LIKE ? OR Major LIKE ? OR ID LIKE ? OR Age LIKE ? OR GPA LIKE ?";
            PreparedStatement pstmt = con.prepareStatement(query);

// Set all placeholders with the searchText
            pstmt.setString(1, "%" + searchText + "%");
            pstmt.setString(2, "%" + searchText + "%");
            pstmt.setString(3, "%" + searchText + "%");
            pstmt.setDouble(4, Double.parseDouble(searchText));
            pstmt.setDouble(5, Double.parseDouble(searchText));


            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                String ID = String.valueOf(rs.getLong("ID"));
                String Name = rs.getString("Name");
                String Major = rs.getString("Major");
                String Age = String.valueOf(rs.getInt("Age"));
                String GPA = rs.getString("GPA");
                tblModel.addRow(new String[]{ID, Name, Major, Age, GPA});
            }
            Search.setText("");

            pstmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            connect.setText("Not Connected!");
        } finally {
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextField Search;
    private javax.swing.JButton SearchDa;
    private javax.swing.JTable Table;
    private javax.swing.JButton add;
    private javax.swing.JTextField age;
    private javax.swing.JButton clear;
    private javax.swing.JLabel connect;
    private javax.swing.JButton delete;
    private javax.swing.JTextField gpa;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton load;
    private javax.swing.JTextField major;
    private javax.swing.JTextField name;
    // End of variables declaration                   

    private void LoadTableData() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

}
